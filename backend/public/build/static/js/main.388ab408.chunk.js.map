{"version":3,"sources":["Components/Home/Home.js","redux/actions/actionTypes.js","Components/Custom_Hooks/LoginHook.js","redux/actions/users/userActions.js","Components/Validation/Validate.js","Components/Login/Login.js","Components/Register/Register.js","redux/actions/users/registerAction.js","Components/Addpatient/AddPatient.js","redux/actions/patients/registerPatientAction.js","Components/Navbar/NavbarContainer.js","Components/PatientMonitoring/Patient/Patient.js","Components/PatientMonitoring/PatientsList/PatientsList.js","redux/actions/patients/patientListAction.js","Components/PatientMonitoring/PatientChart/PatientChart.js","Components/Firebase/Firebase.js","redux/actions/patients/firebasePatientAction.js","Components/PatientMonitoring/AsignMachine/AsignMachine.js","redux/actions/sensorMachine/listMachineAction.js","redux/actions/sensorMachine/assignMachineAction.js","Components/PatientMonitoring/PatientDetails/PatientDetails.js","redux/actions/patients/patientDetailsAction.js","Components/DoctorProfile/Profile.js","redux/actions/sensorMachine/initiateMachineAction.js","Components/AllocateMachine/AllocateMachine.js","Components/RegisterMachine/RegisterMachine.js","Components/DiseaseDetection/ProgressBar/ProgressBar.js","Components/DiseaseDetection/ProgressBarAdapter/ProgressBarAdapter.js","Components/DiseaseDetection/DiseaseDetection.js","App.js","reportWebVitals.js","redux/store/store.js","redux/reducers/users/userReducer.js","redux/reducers/patients/patientReducer.js","redux/reducers/patients/patientListReducer.js","redux/reducers/patients/patientDetailsReducer.js","redux/reducers/patients/firebasePatientReducer.js","redux/reducers/sensorMachine/sensorMachineReducer.js","serviceWorkerRegistration.js","index.js"],"names":["useStyles","makeStyles","theme","container","display","flexWrap","width","formControl","margin","spacing","minWidth","Home","userInfo","classes","useState","open","setOpen","model","setModel","handleClose","Container","to","AddPatientButton","DiseaseDetection","onClick","Dialog","disableBackdropClick","disableEscapeKeyDown","onClose","DialogTitle","style","color","DialogContent","className","FormControl","InputLabel","htmlFor","Select","native","value","onChange","event","target","input","Input","id","aria-label","DialogActions","Button","variant","PatientDetection","RegisterMachine","Divider","FooterContainer","styled","div","button","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","PATIENT_REGISTER_REQUEST","PATIENT_REGISTER_SUCCESS","PATIENT_REGISTER_FAIL","FETCH_PATIENT_REQUEST","FETCH_PATIENT_SUCCESS","FETCH_PATIENT_FAIL","PATIENT_DETAILS_REQUEST","PATIENT_DETAILS_SUCCESS","PATIENT_DETAILS_FAIL","FIREBASE_UPDATE_REQUEST","FIREBASE_UPDATE_SUCCESS","FIREBASE_UPDATE_FAIL","INITIATE_MACHINE_REQUEST","INITIATE_MACHINE_SUCCESS","INITIATE_MACHINE_FAIL","LOAD_MACHINE_LIST_REQUEST","LOAD_MACHINE_LIST_SUCCESS","LOAD_MACHINE_LIST_FAIL","ASSIGN_MACHINE_REQUEST","ASSIGN_MACHINE_SUCCESS","ASSIGN_MACHINE_FAIL","useFormLogin","callback","validate","dispatch","useDispatch","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","useEffect","Object","keys","length","handleChange","persist","name","handleSubmit","email","password","preventDefault","a","type","config","headers","axios","post","data","payload","localStorage","setItem","JSON","stringify","response","logInvalidate","test","root","Login","res","window","location","href","split","history","useHistory","push","console","log","Headers","LineOne","TagLineOne","Tag","Form","onSubmit","noValidate","Card","InputFields","TextField","label","autoComplete","placeholder","required","SubmitButton","CreateAcount","Register","department","gender","number","confirmPassword","street1","street2","city","state","country","setState","e","address","reqJson","phoneNo","registerUserAction","Title1","FullName","Department","Group","Title","Col","Check","PhoneNumber","EmailId","Address","Street1","Street2","City","State","Street4","Password","ConfirmPassword","h2","ThankYou","formField","Date","startDate","setStartDate","dateOfBirth","Content","tempDate","FormLabel","component","RadioGroup","FormControlLabel","control","Radio","Label","dateFormat","selected","date","Wrapper","flexGrow","menuButton","marginRight","title","fontWeight","textDecoration","title1","padding","NavbarContainer","React","anchorEl","setAnchorEl","Boolean","AppBar","position","background","Toolbar","Typography","IconButton","aria-controls","aria-haspopup","currentTarget","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","MenuItem","removeItem","reload","HandleLogout","marginBottom","boxShadow","Patient","URL","sensorMachine","_id","machineCode","CardContent","CardHeader","subheader","CardActions","size","PatientsList","get","useSelector","patientList","patientInfo","loading","Spinner","animation","map","index","PatientChart","updatespo2","setUpdatespo2","updatepulse","setUpdatepulse","details","firebase","chartData1","labels","datasets","fill","backgroundColor","borderColor","yAxisID","chartData2","options","responsive","legend","Fragment","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebasePatientAction","newData","error","marginTop","AsignMachine","patientId","machineList","machine","setMachine","isDisable","setIsDisabled","userLogin","userId","url","MachineListLoading","handleOpen","machineId","assignMachineAction","labelId","onOpen","identifyName","disabled","PatientDetails","parsed","queryString","parse","search","m","patientDetail","patientDetailsAction","database","ref","limitToLast","on","datasnap","forEach","snap","parseInt","val","List","ListItem","ListItemAvatar","ListItemText","primary","toString","Profile","initiateMachineAction","put","bullet","transform","fontSize","pos","mt","center","justifyContent","AllocateMachine","authCode","setValue","gutterBottom","FormGroup","LinearProgressWithLabel","props","Box","alignItems","mr","LinearProgress","Math","round","bar","height","borderRadius","LinearWithValueLabel","progressData","confidence","themes","createMuiTheme","palette","main","ThemeProvider","ProgressBarAdapter","classifier","progressBars","result","item","i","floor","random","hashCode","card","placeItems","videoRef","useRef","start","setStart","setResult","loaded","setLoaded","prediction","setPrediction","ml5","imageClassifier","navigator","mediaDevices","getUserMedia","video","audio","then","stream","current","srcObject","play","useInterval","classify","results","timeout","visible","preload","border","App","path","render","AddPatient","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Middlewares","thunk","initialState","getItem","reducer","combineReducers","action","createPatient","AssignMachineLoading","store","createStore","composeWithDevTools","applyMiddleware","hostname","match","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.388ab408.chunk.js","sourcesContent":["import { Divider } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Input from '@material-ui/core/Input';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        width: 220,\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 220,\r\n    },\r\n}));\r\n\r\nfunction Home({ userInfo }) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    const [model, setModel] = useState('');\r\n\r\n    const handleChange = (event) => {\r\n        const value = event.target.value;\r\n        setModel(value);\r\n    };\r\n\r\n    const handleOnClick = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    return (\r\n        <Container>\r\n            <Link to='/addpatient'>\r\n                <AddPatientButton>+ Add more Patients</AddPatientButton>\r\n            </Link>\r\n\r\n\r\n            <DiseaseDetection onClick={handleOnClick}>Disease Detection</DiseaseDetection>\r\n\r\n            <Dialog disableBackdropClick disableEscapeKeyDown open={open} onClose={handleClose}>\r\n                <DialogTitle style={{ color: '#9390FF'}}>Fill the form</DialogTitle>\r\n                <DialogContent>\r\n                    <form className={classes.container}>\r\n                        <FormControl className={classes.formControl}>\r\n                            <InputLabel style={{ color: '#9390FF'}} htmlFor=\"demo-dialog-native\">Disease to be Detected</InputLabel>\r\n                            <Select\r\n                                style={{ color: '#9390FF'}}\r\n                                native\r\n                                value={model}\r\n                                onChange={handleChange}\r\n                                input={<Input id=\"demo-dialog-native\" />}\r\n                            >\r\n                                <option aria-label=\"None\" value=\"\" />\r\n                                {/* <option value='ActinicKeratosis'>ActinicKeratosis</option> */}\r\n                                {/* <option value='BoneFracture'>Bone Fracture</option> */}\r\n                                <option value='Diabetes'>Diabetes</option>\r\n                                <option value='Eczema'>Eczema</option>\r\n                                <option value='Lung_Cancer'>Lung Cancer</option>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\" variant='outlined'>\r\n                        Cancel\r\n                    </Button>\r\n                    <Link to={'/diseaseDetection?type=' + model}>\r\n                        <Button onClick={handleClose} color=\"primary\" variant='outlined'>\r\n                            Ok\r\n                        </Button>\r\n                    </Link>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Link to='/patientslist'>\r\n                <PatientDetection>Patients Monitoring</PatientDetection>\r\n            </Link>\r\n\r\n            <Link to='/registerMachine'>\r\n                <RegisterMachine>Register your Machine</RegisterMachine>\r\n            </Link>\r\n\r\n            <Divider variant='middle' width={300} className='mt-5' />\r\n            <FooterContainer className='mt-3'>\r\n                Copyright @MedicoAId 2021\r\n            </FooterContainer>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Home\r\n\r\nconst Container = styled.div`\r\n    display: grid;\r\n    place-items: center;\r\n    flex-direction: coloumn;\r\n    padding: 10px;\r\n\r\n`\r\nconst AddPatientButton = styled.button`\r\n    width: 300px;\r\n    padding: 6px;\r\n    margin-top: 15px;\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    background-color: #9390FF;\r\n    color: white;\r\n    border: 2px solid #9390FF;\r\n    border-radius: 4px;\r\n    :hover{\r\n        background-color: white;\r\n        color: #9390FF;\r\n        border: 2px solid #9390FF;\r\n    }\r\n`\r\nconst DiseaseDetection = styled.button`\r\n    width: 300px;\r\n    height: 160px;\r\n    margin-top: 15px;\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    color: #9390FF;\r\n    background-color: white;\r\n    border: 2px solid #9390FF;\r\n    border-radius: 16px;\r\n    :hover{\r\n        background-color: #9390FF;;\r\n        color: white;\r\n        border: 2px solid #9390FF;\r\n    }\r\n`\r\nconst PatientDetection = styled.button`\r\n    width: 300px;\r\n    height: 160px;\r\n    margin-top: 15px;\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    color: #9390FF;\r\n    background-color: white;\r\n    border: 2px solid #9390FF;\r\n    border-radius: 16px;\r\n    :hover{\r\n        background-color: #9390FF;;\r\n        color: white;\r\n        border: 2px solid #9390FF;\r\n    }\r\n`\r\n\r\nconst RegisterMachine = styled.button`\r\n    width: 300px;\r\n    padding: 6px;\r\n    margin-top: 15px;\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    background-color: #9390FF;\r\n    color: white;\r\n    border: 2px solid #9390FF;\r\n    border-radius: 4px;\r\n    :hover{\r\n        background-color: white;\r\n        color: #9390FF;\r\n        border: 2px solid #9390FF;\r\n    }\r\n`\r\n\r\nconst FooterContainer = styled.div`\r\n    color: #9390FF\r\n`","//USER REGISTRATION\r\nexport const USER_REGISTER_REQUEST = 'USER_REGISTER_REQUEST';\r\nexport const USER_REGISTER_SUCCESS = 'USER_REGISTER_SUCCESS';\r\nexport const USER_REGISTER_FAIL = 'USER_REGISTER_FAIL';\r\n\r\n//USER LOGIN\r\nexport const USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST';\r\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS';\r\nexport const USER_LOGIN_FAIL = 'USER_LOGIN_FAIL';\r\n\r\n//Patient Register\r\nexport const PATIENT_REGISTER_REQUEST = 'PATIENT_REGISTER_REQUEST';\r\nexport const PATIENT_REGISTER_SUCCESS = 'PATIENT_REGISTER_SUCCESS';\r\nexport const PATIENT_REGISTER_FAIL = 'PATIENT_REGISTER_FAIL';\r\n\r\n//Patient list\r\nexport const FETCH_PATIENT_REQUEST = 'FETCH_PATIENT_REQUEST';\r\nexport const FETCH_PATIENT_SUCCESS = 'FETCH_PATIENT_SUCCESS';\r\nexport const FETCH_PATIENT_FAIL = 'FETCH_PATIENT_FAIL';\r\n\r\n//Patient Details\r\nexport const PATIENT_DETAILS_REQUEST = 'PATIENT_DETAILS_REQUEST';\r\nexport const PATIENT_DETAILS_SUCCESS = 'PATIENT_DETAILS_SUCCESS';\r\nexport const PATIENT_DETAILS_FAIL = 'PATIENT_DETAILS_FAIL';\r\n\r\n//firebase actions\r\nexport const FIREBASE_UPDATE_REQUEST = 'FIREBASE_UPDATE_REQUEST';\r\nexport const FIREBASE_UPDATE_SUCCESS = 'FIREBASE_UPDATE_SUCCESS';\r\nexport const FIREBASE_UPDATE_FAIL = 'FIREBASE_UPDATE_FAIL';\r\n\r\n//Initiate Machine\r\nexport const INITIATE_MACHINE_REQUEST = 'INITIATE_MACHINE_REQUEST';\r\nexport const INITIATE_MACHINE_SUCCESS = 'INITIATE_MACHINE_SUCCESS';\r\nexport const INITIATE_MACHINE_FAIL = 'INITIATE_MACHINE_FAIL';\r\n\r\n//Load Machine List\r\nexport const LOAD_MACHINE_LIST_REQUEST = 'LOAD_MACHINE_LIST_REQUEST';\r\nexport const LOAD_MACHINE_LIST_SUCCESS = 'LOAD_MACHINE_LIST_SUCCESS';\r\nexport const LOAD_MACHINE_LIST_FAIL = 'LOAD_MACHINE_LIST_FAIL';\r\n\r\n//Load Machine List\r\nexport const ASSIGN_MACHINE_REQUEST = 'ASSIGN_MACHINE_REQUEST';\r\nexport const ASSIGN_MACHINE_SUCCESS = 'ASSIGN_MACHINE_SUCCESS';\r\nexport const ASSIGN_MACHINE_FAIL = 'ASSIGN_MACHINE_FAIL';","import { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { loginUserAction } from '../../redux/actions/users/userActions';\r\n\r\nconst useFormLogin = (callback, validate) => {\r\n    const dispatch = useDispatch();\r\n    const [values, setValues] = useState({});\r\n    const [errors, setErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(errors).length === 0 && isSubmitting) {\r\n            callback();\r\n        }\r\n    }, [errors, isSubmitting, callback]);\r\n\r\n    const handleSubmit = (event) => {\r\n        if (event) { \r\n            event.preventDefault(); \r\n            dispatch(loginUserAction(values.email, values.password)); \r\n        }\r\n        setErrors(validate(values));\r\n        setIsSubmitting(true);\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        event.persist();\r\n        setValues(values => ({ ...values, [event.target.name]: event.target.value }));\r\n    };\r\n\r\n    return {\r\n        handleChange,\r\n        handleSubmit,\r\n        values,\r\n        errors,\r\n    }\r\n};\r\n\r\nexport default useFormLogin","import {\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n} from \"../actionTypes\";\r\n\r\nimport axios from 'axios';\r\n\r\nconst loginUserAction = (email, password) => {\r\n    return async (dispatch) =>{\r\n        try {\r\n            dispatch({\r\n                type: USER_LOGIN_REQUEST\r\n            })\r\n            // call to api\r\n            const config = {\r\n                headers: {\r\n                    \"content-Type\": \"application/json\",\r\n                },\r\n            };\r\n\r\n            const { data } = await axios.post('/api/users/login',\r\n                { email, password },\r\n                config\r\n            );\r\n\r\n            dispatch({\r\n                type: USER_LOGIN_SUCCESS,\r\n                payload: data  \r\n            });\r\n            \r\n            //local storage\r\n            localStorage.setItem('userAuthData', JSON.stringify(data));\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_LOGIN_FAIL,\r\n                payload: error.response && error.response.data.errors\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport {loginUserAction};","export default function logInvalidate(values) {\r\n    let errors = {};\r\n    if (!values.email) {\r\n      errors.email = 'Email address is required';\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n      errors.email = 'Email address is invalid';\r\n    }\r\n    if (!values.password) {\r\n      errors.password = 'Password is required';\r\n    } else if (values.password.length < 6) {\r\n      errors.password = 'Password must be 6 or more characters';\r\n    }\r\n    return errors;\r\n  };\r\n  ","import React, { useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form } from 'react-bootstrap'\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport useFormLogin from '../Custom_Hooks/LoginHook';\r\nimport logInvalidate from '../Validation/Validate';\r\nimport 'bulma/css/bulma.css';\r\nimport { Card } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n// import { useSelector } from 'react-redux';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n}));\r\n\r\nconst Login = () => {\r\n    const classes = useStyles();\r\n    //if url is not matching to the initial url then it changes back to the initial\r\n    const URL = window.location.href;\r\n    var res = URL.split(\"/\");\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        if (res.length > 1) {\r\n            history.push('/');\r\n        }\r\n    }, [history, res.length]);\r\n\r\n    //custom hook called from a diff component\r\n    const {\r\n        values,\r\n        errors,\r\n        handleChange,\r\n        handleSubmit,\r\n    } = useFormLogin(login, logInvalidate);\r\n\r\n    function login() {\r\n        console.log('Logged-In successfully!');\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Headers>\r\n                <LineOne>LOGIN</LineOne>\r\n                <TagLineOne>Now to proceed further</TagLineOne>\r\n                <Tag>MedicoAId<br />Need insights on medical images<br /> or monitor your patient</Tag>\r\n\r\n                <Form onSubmit={handleSubmit} noValidate>\r\n                    <Card>\r\n                        <InputFields>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                autoComplete='off'\r\n                                className={classes.root}\r\n                                value={values.email || ''}\r\n                                placeholder='abc@xyz.com'\r\n                                type='email'\r\n                                name='email'\r\n                                onChange={handleChange}\r\n                                required\r\n                            />\r\n                            {errors.email && (\r\n                                <p className=\"help is-danger\">{errors.email}</p>\r\n                            )}\r\n                            <TextField\r\n                                label=\"Password\"\r\n                                autoComplete='off'\r\n                                className={classes.root}\r\n                                value={values.password || ''}\r\n                                placeholder='*******'\r\n                                type='password'\r\n                                name='password'\r\n                                onChange={handleChange}\r\n                                required\r\n                            />\r\n                            {errors.password && (\r\n                                <p className=\"help is-danger\">{errors.password}</p>\r\n                            )}\r\n                            <SubmitButton type='submit'>Submit</SubmitButton>\r\n\r\n                        </InputFields>\r\n                    </Card>\r\n                </Form>\r\n                <CreateAcount>\r\n                    Don't have an Account?<br /> Create One now...<br />\r\n                    <Link to='/register'><p>Click here!</p></Link>\r\n                </CreateAcount>\r\n\r\n            </Headers>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Login\r\n\r\nconst Container = styled.div`\r\n    padding-top: 40px;\r\n    height: 100vh;\r\n    background-color: #9390FF;\r\n    justify-content: center;\r\n`\r\nconst Headers = styled.div`\r\n    color: white;\r\n    display: grid;\r\n    place-items: center;\r\n`\r\nconst LineOne = styled.div`\r\n    font-size: 42px;\r\n    font-weight: 700;\r\n`\r\nconst TagLineOne = styled.div`\r\n    margin-top: -10px;\r\n`\r\nconst Tag = styled.div`\r\n    margin-top: 30px;\r\n    text-align: center;\r\n\r\n`\r\nconst InputFields = styled.div`\r\n    margin-top: 28px;\r\n    display: grid;\r\n    place-items: center;\r\n\r\n`\r\n\r\nconst SubmitButton = styled.button`\r\n    margin-top: 15px;\r\n    width: 100px;\r\n    margin-bottom: 5px;\r\n    background-color: #9390FF;\r\n    color: white;\r\n    padding: 10px 10px;\r\n    border: 2px solid #9390FF;\r\n    border-radius: 4px;\r\n    text-decoration: none;\r\n    :hover{\r\n        background-color: white;\r\n        color: #9390FF;\r\n        border: 2px solid #9390FF;\r\n    }\r\n`\r\n\r\nconst CreateAcount = styled.button`\r\n    background-color: #9390FF;\r\n    color: white;\r\n    border: none;\r\n    margin-top: 50px;\r\n\r\n    p{\r\n        color: white;\r\n        background-color: transparent;\r\n        text-decoration: none;\r\n\r\n    }\r\n`","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Form, Col } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport { registerUserAction } from '../../redux/actions/users/registerAction';\r\n\r\nfunction Register() {\r\n    const [state, setState] = useState({\r\n        name: '',\r\n        department: '',\r\n        gender: '',\r\n        number: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        street1: '',\r\n        street2: '',\r\n        city: '',\r\n        state: '',\r\n        country: ''\r\n\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const address = {\r\n            street1: state.street1,\r\n            street2: state.street2,\r\n            city: state.city,\r\n            state: state.state,\r\n            country: state.country\r\n        }\r\n        const reqJson = {\r\n            name: state.name,\r\n            department: state.department,\r\n            gender: state.gender,\r\n            phoneNo: state.number,\r\n            email: state.email,\r\n            password: state.password,\r\n            confirmPassword: state.confirmPassword,\r\n            address: address\r\n        }\r\n        dispatch(registerUserAction(reqJson));\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        const value = e.target.value;\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: value,\r\n        });\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Container>\r\n\r\n            <Headers>\r\n                <Form onSubmit={(e) => handleSubmit(e)} >\r\n                    <InputFields>\r\n\r\n                        <Title1>Doctor Registration</Title1>\r\n                        <FullName\r\n                            autoComplete='off'\r\n                            type='text'\r\n                            name='name'\r\n                            value={state.name}\r\n                            placeholder='Enter full name'\r\n                            onChange={handleChange}\r\n                        />\r\n\r\n                        <Department\r\n                            type='text'\r\n                            name='department'\r\n                            placeholder='Enter Department name'\r\n                            value={state.department}\r\n                            onChange={handleChange}\r\n                        />\r\n\r\n                        <Form.Group>\r\n                            <Title>\r\n                                Gender\r\n                            </Title>\r\n                            <Col>\r\n                                <Form.Check\r\n                                    type=\"radio\"\r\n                                    name=\"gender\"\r\n                                    id=\"gender\"\r\n                                    value='male'\r\n                                    label='Male'\r\n                                    onChange={handleChange}\r\n                                />\r\n\r\n                                <Form.Check\r\n                                    type=\"radio\"\r\n                                    name=\"gender\"\r\n                                    id=\"gender\"\r\n                                    value='female'\r\n                                    label='Female'\r\n                                    onChange={handleChange}\r\n                                />\r\n\r\n                                <Form.Check\r\n                                    type=\"radio\"\r\n                                    name=\"gender\"\r\n                                    id=\"gender\"\r\n                                    value='Other'\r\n                                    label='Other'\r\n                                    onChange={handleChange}\r\n                                />\r\n\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n\r\n                        <PhoneNumber\r\n                            type='text'\r\n                            name='number'\r\n                            placeholder='Enter phone number'\r\n                            value={state.number}\r\n                            onChange={handleChange}\r\n                        />\r\n\r\n                        <EmailId\r\n                            type='email'\r\n                            name='email'\r\n                            placeholder='Enter Email-Id'\r\n                            value={state.email}\r\n                            onChange={handleChange}\r\n                        />\r\n\r\n                        <Address>\r\n                            <Title>Address</Title>\r\n                            <Street1\r\n                                type='text'\r\n                                name='street1'\r\n                                placeholder='Street 1'\r\n                                value={state.street1}\r\n                                onChange={handleChange}\r\n                            />\r\n                            <Street2\r\n                                type='text'\r\n                                name='street2'\r\n                                placeholder='Street 2'\r\n                                value={state.street2}\r\n                                onChange={handleChange}\r\n                            />\r\n                            <City\r\n                                type='text'\r\n                                name='city'\r\n                                placeholder='City'\r\n                                value={state.city}\r\n                                onChange={handleChange}\r\n                            />\r\n                            <State\r\n                                type='text'\r\n                                name='state'\r\n                                placeholder='State'\r\n                                value={state.state}\r\n                                onChange={handleChange}\r\n                            />\r\n                            <Street4\r\n                                type='text'\r\n                                name='country'\r\n                                placeholder='Country'\r\n                                value={state.country}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </Address>\r\n\r\n                        <Password\r\n                            type='text'\r\n                            name='password'\r\n                            placeholder='Password'\r\n                            value={state.password}\r\n                            onChange={handleChange}\r\n                        />\r\n                        <ConfirmPassword\r\n                            type='text'\r\n                            name='confirmPassword'\r\n                            placeholder='Confirm Password'\r\n                            value={state.confirmPassword}\r\n                            onChange={handleChange}\r\n                        />\r\n                        <SubmitButton type='submit'>Submit</SubmitButton>\r\n                        {/* <Link to='/thankyou'>\r\n                            <SubmitButton type='submit'>Submit</SubmitButton>\r\n                        </Link> */}\r\n                    </InputFields>\r\n                </Form>\r\n\r\n            </Headers>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Register\r\n\r\nconst Container = styled.div`\r\n    padding-top: 10px;\r\n    padding-bottom: 40px;\r\n    height: auto;\r\n    background-color: #9390FF;\r\n    justify-content: center;\r\n`\r\n\r\nconst Headers = styled.div`\r\n    color: white;\r\n    display: grid;\r\n    place-items: center;\r\n\r\n`\r\nconst InputFields = styled.div`\r\n    margin-top: 28px;\r\n    display: grid;\r\n    place-items: center;\r\n\r\n`\r\nconst Title1 = styled.h2`\r\n    color: white;\r\n    font-weight: 700;\r\n`\r\n\r\nconst Title = styled.h2`\r\n    color: white;\r\n    \r\n`\r\nconst FullName = styled.input`\r\n    margin-top: 8px;\r\n    padding: 15px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    :focus{\r\n        outline: none;\r\n    }\r\n`\r\nconst Department = styled.input`\r\n    margin-top: 15px;\r\n    padding: 15px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    :focus{\r\n        outline: none;\r\n    }  \r\n`\r\nconst PhoneNumber = styled.input`\r\n    margin-top: 15px;\r\n    padding: 15px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    :focus{\r\n        outline: none;\r\n    }\r\n`\r\nconst EmailId = styled.input`\r\n    margin-top: 15px;\r\n    padding: 15px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    :focus{\r\n        outline: none;\r\n    }\r\n`\r\nconst Address = styled.div`\r\n    margin-top: 20px;   \r\n    display: grid;\r\n    place-items: center;\r\n`\r\nconst Street1 = styled.input`\r\n    padding: 15px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    :focus{\r\n        outline: none;\r\n    }\r\n`\r\nconst Street2 = styled.input`\r\n    margin-top: 8px;\r\n    padding: 15px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    :focus{\r\n        outline: none;\r\n    }\r\n`\r\n\r\nconst City = styled.input`\r\n    margin-top: 8px;\r\n    padding: 15px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    :focus{\r\n        outline: none;\r\n    }\r\n`\r\nconst State = styled.input`\r\n    margin-top: 8px;\r\n    padding: 15px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    :focus{\r\n        outline: none;\r\n    }\r\n`\r\n\r\nconst Street4 = styled.input`\r\n    margin-top: 8px;\r\n    padding: 15px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    :focus{\r\n        outline: none;\r\n    }\r\n`\r\n\r\nconst Password = styled.input`\r\n    margin-top: 48px;\r\n    padding: 15px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    :focus{\r\n        outline: none;\r\n    }\r\n`\r\n\r\nconst ConfirmPassword = styled.input`\r\n    margin-top: 8px;\r\n    padding: 15px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    :focus{\r\n        outline: none;\r\n    }\r\n`\r\n\r\nconst SubmitButton = styled.button`\r\n    margin-top: 25px;\r\n    width: 100px;\r\n    background-color: white;\r\n    color: #9390FF;\r\n    padding: 10px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    :hover{\r\n        background-color: #9390FF;\r\n        color: white;\r\n        border: 2px solid white;\r\n    }\r\n`","import {\r\n    USER_REGISTER_FAIL,\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS\r\n} from \"../actionTypes\";\r\n\r\nimport axios from 'axios';\r\n\r\nconst registerUserAction = (reqJson) => {\r\n    return async (dispatch) =>{\r\n        try {\r\n            dispatch({\r\n                type: USER_REGISTER_REQUEST\r\n            })\r\n            // call to api\r\n            const config = {\r\n                headers: {\r\n                    \"content-Type\": \"application/json\",\r\n                },\r\n            };\r\n            console.log(reqJson);\r\n            const { data } = await axios.post('/api/users/register',\r\n                reqJson ,\r\n                config\r\n            );\r\n\r\n            dispatch({\r\n                type: USER_REGISTER_SUCCESS,\r\n                payload: data  \r\n            });\r\n\r\n            //local storage\r\n            localStorage.setItem('userAuthData', JSON.stringify(data));\r\n            \r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_REGISTER_FAIL,\r\n                payload: error.response && error.response.data.errors\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport {registerUserAction};","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Col } from 'react-bootstrap'\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { registerPatientAction } from '../../redux/actions/patients/registerPatientAction';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\n\r\nfunction ThankYou() {\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n                width: '30ch',\r\n            },\r\n        },\r\n        formField:{\r\n            width: '30ch',\r\n        }\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [state, setState] = useState({\r\n        email: '',\r\n        name: '',\r\n        phoneNo: '',\r\n        gender: '',\r\n        dateOfBirth: new Date()\r\n    })\r\n    \r\n    const dispatch = useDispatch();\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const tempDate = state.dateOfBirth;\r\n        console.log(tempDate);\r\n        dispatch(registerPatientAction(state));\r\n\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        const value = e.target.value;\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: value,\r\n        });\r\n    }\r\n    return (\r\n        <Container>\r\n            <Content>\r\n                <Card className={classes.root}>\r\n                    <Form onSubmit={ handleSubmit }>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            autoComplete='off'\r\n                            className={classes.formField}\r\n                            value={state.email}\r\n                            placeholder='abc@xyz.com'\r\n                            type='email'\r\n                            name='email'\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Name\"\r\n                            autoComplete='off'\r\n                            className={classes.formField}\r\n                            value={state.name}\r\n                            placeholder='Enter Name'\r\n                            type='text'\r\n                            name='name'\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n\r\n                        <TextField\r\n                            label = \"Phone Number\"\r\n                            autoComplete=\"off\"\r\n                            name='phoneNo'\r\n                            value={state.phoneNo}\r\n                            className={classes.formField}\r\n                            type=\"text\"\r\n                            placeholder=\"XXXXXXXXXXXX\"\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n\r\n                        <FormControl className= 'mt-4'>\r\n                            <FormLabel component=\"legend\">Gender</FormLabel>\r\n                            <RadioGroup aria-label=\"gender\" name=\"gender\"  value={state.gender} onChange={handleChange}>\r\n                                <FormControlLabel value=\"female\" control={<Radio color = \"primary\" />} label=\"Female\" />\r\n                                <FormControlLabel value=\"male\" control={<Radio color = \"primary\" />} label=\"Male\" />\r\n                                <FormControlLabel value=\"other\" control={<Radio color = \"primary\" />} label=\"Other\" />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n\r\n                        <Form.Group>\r\n                            <Form.Label>\r\n                                Date of Birth\r\n                            </Form.Label>\r\n                            <Col>\r\n                                <DatePicker\r\n                                    name='dateOfBirth'\r\n                                    onChange={handleChange}\r\n                                    value={state.dateOfBirth}\r\n                                    dateFormat=\"dd/MM/yyyy\"\r\n                                    selected={startDate}\r\n                                    onChange={date => setStartDate(date)}\r\n                                    isClearable\r\n                                    placeholderText=\"Enter DOB\"\r\n                                    closeOnScroll={true}\r\n                                />\r\n                            </Col>\r\n\r\n                        </Form.Group>\r\n\r\n\r\n                        <Wrapper>\r\n                            <Link to='/'>\r\n                                <SubmitButton className='mr-3' type='submit'>Home</SubmitButton>\r\n                            </Link>\r\n                            <SubmitButton type='submit'>Submit</SubmitButton>\r\n                        </Wrapper>\r\n                    </Form>\r\n                </Card>\r\n            </Content>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ThankYou\r\nconst Container = styled.div`\r\n    padding-top: 20px;\r\n    height: 100vh;\r\n    background-color: white;\r\n    justify-content: center;\r\n\r\n`\r\nconst Content = styled.div`\r\n    color: #9390FF;\r\n    display: grid;\r\n    place-items: center;    \r\n`\r\n\r\nconst Wrapper = styled.div`\r\ntext-align: center;\r\n`\r\n\r\nconst SubmitButton = styled.button`\r\n    margin-top: 25px;\r\n    width: 100px;\r\n    background-color: #9390FF;\r\n    color: white;\r\n    font-weight: 700;\r\n    padding: 10px;\r\n    border: 2px solid #9390FF;\r\n    border-radius: 4px;\r\n    :hover{\r\n        background-color: white;\r\n        color: #9390FF;\r\n        border: 2px solid #9390FF;\r\n    }\r\n`\r\n","import { PATIENT_REGISTER_FAIL, PATIENT_REGISTER_REQUEST, PATIENT_REGISTER_SUCCESS } from \"../actionTypes\";\r\nimport axios from 'axios';\r\n\r\nconst registerPatientAction = (reqJson) => {\r\n    return async (dispatch) =>{\r\n        try {\r\n            dispatch({\r\n                type: PATIENT_REGISTER_REQUEST\r\n            })\r\n            // call to api\r\n            const config = {\r\n                headers: {\r\n                    \"content-Type\": \"application/json\",\r\n                },\r\n            };\r\n    \r\n            const { data } = await axios.post('/api/patients/register',\r\n                reqJson,\r\n                config\r\n            );\r\n\r\n            dispatch({\r\n                type: PATIENT_REGISTER_SUCCESS,\r\n                payload: data,\r\n                 \r\n            });\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: PATIENT_REGISTER_FAIL,\r\n                payload: error.response && error.response.data.errors\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport {registerPatientAction}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n\r\n  title: {\r\n    flexGrow: 1,\r\n    fontWeight: 700,\r\n    color: 'white',\r\n    textDecoration: 'none',\r\n    marginRight: 'auto'\r\n  },\r\n  title1: {\r\n    flexGrow: 1,\r\n    color: 'black',\r\n    textDecoration: 'none',\r\n    padding: '0'\r\n  },\r\n}));\r\n\r\nexport default function NavbarContainer({userInfo}) {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const HandleLogout = (e) => {\r\n    e.preventDefault();\r\n    localStorage.removeItem(\"userAuthData\");\r\n    window.location.href = \"/\";\r\n    window.location.reload();\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" style={{ background: '#9390FF' }}>\r\n        <Toolbar>\r\n            <Typography variant=\"h5\" className={classes.title}>\r\n                MedicoAId\r\n            </Typography>\r\n          \r\n            <div>\r\n              <IconButton\r\n                id='fade-menu'\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleMenu}\r\n                color=\"inherit\"\r\n              >\r\n                <AccountCircle />\r\n              </IconButton>\r\n              <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                open={open}\r\n                onClose={handleClose}\r\n              >\r\n                <MenuItem onClick={handleClose}>\r\n                  <Link to='/profile'>\r\n                        <p className={classes.title1}>Profile</p>\r\n                    </Link>\r\n                </MenuItem>\r\n                <MenuItem onClick={handleClose}>\r\n                    <Link to='/'>\r\n                        <p className={classes.title1}>Home</p>\r\n                    </Link>\r\n                </MenuItem>\r\n                <MenuItem onClick={(e) => HandleLogout(e) }>Logout</MenuItem>\r\n              </Menu>\r\n            </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CardHeader } from '@material-ui/core';\r\n\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 340,\r\n        marginBottom: '20px',\r\n        boxShadow: '0 2px 6px rgba(50, 50, 93, 0.9), 0 5px 3px rgba(0, 0, 0, 0.08)'\r\n    },\r\n\r\n});\r\n\r\nexport default function Patient({data}) {\r\n    const classes = useStyles();\r\n    var URL = '';\r\n    if ( data.sensorMachine ) {\r\n        URL = '/patientdetails?id=' + data._id + '&m=' + data.sensorMachine.machineCode;\r\n    } else {\r\n        URL = '/patientdetails?id=' + data._id + '&m=' + 'emp';\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <CardHeader\r\n                        title={data.name}\r\n                        subheader={data.gender}\r\n                    />\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Link to={URL}>\r\n                        <Button\r\n                            size=\"medium\"\r\n                            variant='contained'\r\n                            color='primary'\r\n                        >\r\n                            More\r\n                        </Button>\r\n                    </Link>\r\n                </CardActions>\r\n            </Card>\r\n        </Container>\r\n\r\n    );\r\n}\r\n\r\nconst Container = styled.div`\r\n    background: black;\r\n    color: white;\r\n`","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Patient from '../../PatientMonitoring/Patient/Patient';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux'\r\nimport { patientListAction } from '../../../redux/actions/patients/patientListAction';\r\nimport {Spinner} from 'react-bootstrap';\r\n\r\nfunction PatientsList() {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n\r\n        dispatch(patientListAction());\r\n    }, [dispatch]);\r\n    const { patientInfo, loading } = useSelector(state => state.patientList);\r\n\r\n    return (\r\n        <Container>\r\n            {\r\n                loading ? (\r\n                    <div><Spinner animation=\"border\" variant=\"primary\" /></div>\r\n                ) : (\r\n                    <div>\r\n                        {\r\n                            patientInfo.map((data, index) =>\r\n                                <Patient data={data} key={index} />\r\n                            )\r\n                        }\r\n                    </div>\r\n\r\n                )\r\n            }\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: grid;\r\n    place-items: center;\r\n    flex-direction: coloumn;\r\n    padding: 10px;\r\n`\r\n\r\nexport default PatientsList\r\n","import axios from 'axios';\r\nimport { FETCH_PATIENT_FAIL, FETCH_PATIENT_REQUEST, FETCH_PATIENT_SUCCESS } from '../actionTypes';\r\n\r\nconst patientListAction = () => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({\r\n                type: FETCH_PATIENT_REQUEST\r\n            });\r\n            // const config = {\r\n            //     headers: {\r\n            //         'content-Type': 'aplication/json'\r\n            //     }\r\n            // }\r\n            \r\n            const { data } = await axios.get('api/patients');\r\n\r\n            dispatch({\r\n                type: FETCH_PATIENT_SUCCESS,\r\n                payload: data\r\n            });\r\n\r\n        } catch (error) {\r\n             dispatch({\r\n                type: FETCH_PATIENT_FAIL,\r\n                payload: error.response && error.response.data.errors\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport {patientListAction};","import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nconst PatientChart = () => {\r\n  var [updatespo2, setUpdatespo2] = useState([]);\r\n  var [updatepulse, setUpdatepulse] = useState([]);\r\n  const {details} = useSelector(state => state.firebase)\r\n  useEffect(() => {\r\n    \r\n    // console.log(details);\r\n    if( details && details.type === 's'){\r\n      setUpdatespo2 ( details.data);\r\n    }\r\n    else if (details && details.type === 'p') {\r\n      setUpdatepulse(details.data);\r\n    }  \r\n  }, [setUpdatespo2, setUpdatepulse, details])\r\n  \r\n  const chartData1 = {\r\n    labels: ['0', '1', '2', '2', '4', '5'],\r\n    datasets: [\r\n      {\r\n        label: 'Pulse rate',\r\n        data: updatepulse,\r\n        fill: true,\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n        borderColor: 'rgba(255, 99, 132, 0.2)',\r\n        yAxisID: 'y-axis-1',\r\n      },\r\n    ],\r\n  };\r\n  const chartData2 = {\r\n    labels: ['0', '1', '2', '2', '4', '5'],\r\n    datasets: [\r\n      {\r\n        label: 'SpO2',\r\n        data: updatespo2,\r\n        fill: false,\r\n        backgroundColor: 'rgb(54, 162, 235)',\r\n        borderColor: 'rgba(54, 162, 235, 0.2)',\r\n        yAxisID: 'y-axis-2',\r\n      },\r\n    ],\r\n  };\r\n  \r\n  const options = {\r\n    responsive: true,\r\n    legend: {\r\n      display: false\r\n    }\r\n  }\r\n  // console.log(data1);\r\n  return (\r\n    <React.Fragment>\r\n      <div className='header mt-4'>\r\n        <h1 className='title'>Biological parameters of patient</h1>\r\n      </div>\r\n      <Line data={chartData1} options={options} />\r\n      <Line data={chartData2} options={options} />\r\n\r\n    </React.Fragment>\r\n  )\r\n\r\n};\r\n\r\nexport default PatientChart\r\n\r\n\r\n\r\n// setInterval(function () {\r\n  \r\n  //   var currentState = spo2;\r\n  //   if (currentState.length < 6){\r\n  //     var SPO2 = [...currentState, 19];\r\n  //     setSpo2(SPO2);\r\n  //   } else{\r\n  //     currentState.shift();\r\n  //     currentState.push(15);\r\n  //     setSpo2(currentState);\r\n      \r\n  //   }\r\n  //   console.log(currentState);\r\n  // }, 5000);\r\n\r\n  // firebase.database().ref(\"sensor/SpO2\").on(\"value\", datasnap => {\r\n  //   datasnap.forEach(snap => {\r\n  //     spo2.push(parseInt(snap.val()));\r\n  //   });\r\n\r\n  //   console.log(spo2)\r\n  // });","import firebase from \"firebase\";\r\n\r\n var config = {\r\n    apiKey: \"AIzaSyAuCbV5D50Vd2JzHVacipr41wvqTFotRc0\",\r\n    authDomain: \"medicoaid-721a6.firebaseapp.com\",\r\n    databaseURL: \"https://medicoaid-721a6.firebaseio.com\",\r\n    projectId: \"medicoaid-721a6\",\r\n    storageBucket: \"medicoaid-721a6.appspot.com\",\r\n    messagingSenderId: \"591820786119\",\r\n    appId: \"1:591820786119:web:cd6a344622655fd042b1e2\",\r\n    measurementId: \"G-DTLYHGCPL7\"\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  export default firebase;","// import axios from 'axios';\r\nimport { FIREBASE_UPDATE_FAIL, FIREBASE_UPDATE_REQUEST, FIREBASE_UPDATE_SUCCESS } from '../actionTypes';\r\nconst firebasePatientAction = (newData, type) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({\r\n                type: FIREBASE_UPDATE_REQUEST\r\n            });\r\n\r\n            dispatch({\r\n                type: FIREBASE_UPDATE_SUCCESS,\r\n                payload: { data: newData, type: type },\r\n            })\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: FIREBASE_UPDATE_FAIL,\r\n                payload: error.response && error.response.data.errors\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport { firebasePatientAction };","import { Button, FormControl, InputLabel, MenuItem, Select } from '@material-ui/core'\r\nimport React, { useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { listMachineAction } from '../../../redux/actions/sensorMachine/listMachineAction';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { assignMachineAction } from '../../../redux/actions/sensorMachine/assignMachineAction';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        display: 'block',\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n}));\r\n\r\nfunction AsignMachine({ patientId }) {\r\n    const classes = useStyles();\r\n    var machineList = [];\r\n\r\n    const [machine, setMachine] = React.useState('');\r\n    const [open, setOpen] = React.useState(false);\r\n    const [isDisable, setIsDisabled] = React.useState(true);\r\n\r\n    const dispatch = useDispatch();\r\n    const { userInfo } = useSelector(state => state.userLogin)\r\n    // console.table(userInfo)\r\n\r\n    useEffect(() => {\r\n        dispatch(listMachineAction(userInfo.id));\r\n    }, [dispatch, userInfo])\r\n\r\n    const { sensorMachine, MachineListLoading } = useSelector(state => state.sensorMachine)\r\n    // console.log(sensorMachine, MachineListLoading)\r\n\r\n    if (sensorMachine) {\r\n        machineList = sensorMachine\r\n        // console.log(machineList[0].id)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let machineId = machine;\r\n\r\n        dispatch(assignMachineAction(patientId, machineId));\r\n        window.location.reload();\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        let value = event.target.value;\r\n        setMachine(value);\r\n\r\n        if (value != null && value != 'None') {\r\n            setIsDisabled(false);\r\n        } else if ( event.target.value === \"None\") {\r\n            setIsDisabled(true);\r\n        }\r\n        // console.log(event.target)\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h4 className='mt-3'>No machine is asign to this patient.</h4>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-controlled-open-select-label\">machines</InputLabel>\r\n\r\n                {\r\n                    MachineListLoading && !sensorMachine ? (\r\n                        <Select\r\n                            labelId=\"demo-controlled-open-select-label\"\r\n                            id=\"demo-controlled-open-select\"\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            onOpen={handleOpen}\r\n                            name='machineInput'\r\n                            value={machine ? machine : ''}\r\n                            onChange={handleChange}\r\n                        >\r\n                            <MenuItem>\r\n                                loading\r\n                                </MenuItem>\r\n                        </Select>\r\n\r\n                    ) : (\r\n                        <Select\r\n                            labelId=\"demo-controlled-open-select-label\"\r\n                            id=\"demo-controlled-open-select\"\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            onOpen={handleOpen}\r\n                            name='machineInput'\r\n                            value={machine ? machine : ''}\r\n                            onChange={handleChange}\r\n                        >\r\n\r\n                            <MenuItem value='None'>\r\n                                <em>None</em>\r\n                            </MenuItem>\r\n                            {\r\n                                machineList.map((data, index) => {\r\n                                    // console.log(data.id)\r\n                                    return (\r\n\r\n                                        <MenuItem value={data.id} key={index}>{data.identifyName}</MenuItem>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Select>\r\n                    )\r\n                }\r\n\r\n                <Button className='mt-3' type='submit' variant='outlined' color='primary' disabled={isDisable}>Asign now</Button>\r\n            </FormControl>\r\n        </form >\r\n    )\r\n}\r\n\r\nexport default AsignMachine\r\n","import axios from 'axios';\r\nimport { LOAD_MACHINE_LIST_FAIL, LOAD_MACHINE_LIST_REQUEST, LOAD_MACHINE_LIST_SUCCESS } from '../actionTypes';\r\n\r\n\r\n\r\nconst listMachineAction = (userId) => {\r\n    return async (dispatch) => {\r\n\r\n        try {\r\n            dispatch({\r\n                type: LOAD_MACHINE_LIST_REQUEST\r\n            })\r\n            // call to api\r\n            const config = {\r\n                headers: {\r\n                    \"content-Type\": \"application/json\",\r\n                },\r\n            };\r\n            \r\n            const url = '/api/sensormachine/listMachine/' + userId;\r\n            const { data } = await axios.get( url,\r\n                config\r\n\r\n            );\r\n\r\n\r\n\r\n            dispatch({\r\n                type: LOAD_MACHINE_LIST_SUCCESS,\r\n                payload: data\r\n            });\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: LOAD_MACHINE_LIST_FAIL,\r\n                payload: error.response && error.response.data.errors\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport { listMachineAction };","import axios from 'axios';\r\nimport {\r\n    ASSIGN_MACHINE_FAIL,\r\n    ASSIGN_MACHINE_REQUEST, ASSIGN_MACHINE_SUCCESS,\r\n} from '../actionTypes';\r\n\r\n\r\n\r\nconst assignMachineAction = (patientId, machineId) => {\r\n    console.log(patientId, machineId)\r\n    return async (dispatch) => {\r\n\r\n        try {\r\n            dispatch({\r\n                type: ASSIGN_MACHINE_REQUEST\r\n            })\r\n            // call to api\r\n            const config = {\r\n                headers: {\r\n                    \"content-Type\": \"application/json\",\r\n                },\r\n            };\r\n\r\n\r\n            const { data } = await axios.post('/api/sensorMachine/assignMachine',\r\n                { patientId , machineId },\r\n                config\r\n\r\n            );\r\n\r\n\r\n\r\n            dispatch({\r\n                type: ASSIGN_MACHINE_SUCCESS,\r\n                payload: data\r\n            });\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: ASSIGN_MACHINE_FAIL,\r\n                payload: error.response && error.response.data.errors\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport { assignMachineAction };","import React, { useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport styled from 'styled-components'\r\nimport queryString from 'query-string'\r\nimport { patientDetailsAction } from '../../../redux/actions/patients/patientDetailsAction';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { Button, Divider, List, ListItem, ListItemAvatar, ListItemText, MenuItem, Select } from '@material-ui/core';\r\nimport PatientChart from '../PatientChart/PatientChart';\r\n\r\nimport firebase from '../../Firebase/Firebase';\r\nimport { firebasePatientAction } from '../../../redux/actions/patients/firebasePatientAction';\r\nimport AsignMachine from '../AsignMachine/AsignMachine';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        //   backgroundColor: theme.palette.background.paper,\r\n    },\r\n    button: {\r\n        display: 'block',\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nfunction PatientDetails() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // const URL = '/patientdetails?id=' + data._id;\r\n\r\n\r\n    //parsing id from website url\r\n    const parsed = queryString.parse(window.location.search);\r\n    const id = parsed.id;\r\n    const machineCode = parsed.m;\r\n\r\n    //dispatching patient details action\r\n    const dispatch = useDispatch();\r\n\r\n    const { details, loading } = useSelector(state => state.patientDetail);\r\n    // const { data } = useSelector(state => state);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(patientDetailsAction(id));\r\n        if (machineCode != 'emp') {\r\n            //updating data from firebase and\r\n            //dispatching firebase action for\r\n            //pulserate and spo2\r\n            firebase.database().ref( machineCode + \"/SPO2\").limitToLast(6).on(\"value\", datasnap => {\r\n                let newData = [];\r\n                datasnap.forEach(snap => {\r\n                    newData.push(parseInt(snap.val()));\r\n                });\r\n\r\n                dispatch(firebasePatientAction(newData, \"s\"));\r\n                //   console.log(newData)\r\n            });\r\n            firebase.database().ref( machineCode + \"/pulseRate\").limitToLast(6).on(\"value\", datasnap => {\r\n                let newData = [];\r\n                datasnap.forEach(snap => {\r\n                    newData.push(parseInt(snap.val()));\r\n                });\r\n\r\n                dispatch(firebasePatientAction(newData, \"p\"));\r\n                //   console.log(newData)\r\n            });\r\n\r\n        }\r\n        // dispatch(listMachineAction(details.id))\r\n    }, [dispatch, id, machineCode]);\r\n\r\n\r\n    return (\r\n        <Container>\r\n            {\r\n                loading ? (\r\n                    <div><Spinner animation=\"border\" variant=\"primary\" /></div>\r\n                ) :\r\n                    (\r\n                        <div>\r\n                            <h1>Patient Details</h1>\r\n                            <Divider />\r\n                            <List className={classes.root}>\r\n                                <ListItem>\r\n                                    <ListItemAvatar>\r\n                                        <h5>Name:&nbsp; </h5>\r\n                                    </ListItemAvatar>\r\n                                    <ListItemText primary={details.name.toString()} > </ListItemText>\r\n                                </ListItem>\r\n                                <Divider variant='middle' component=\"li\" />\r\n                                <ListItem>\r\n                                    <ListItemAvatar>\r\n                                        <h5>Email:&nbsp; </h5>\r\n                                    </ListItemAvatar>\r\n                                    <ListItemText primary={details.email.toString()} > </ListItemText>\r\n                                </ListItem>\r\n                                <Divider variant='middle' component=\"li\" />\r\n                                <ListItem>\r\n                                    <ListItemAvatar>\r\n                                        <h5>Phone number:&nbsp; </h5>\r\n                                    </ListItemAvatar>\r\n                                    <ListItemText primary={details.phoneNo.toString()} > </ListItemText>\r\n                                </ListItem>\r\n                                <Divider variant='middle' component=\"li\" />\r\n                                <ListItem>\r\n                                    <ListItemAvatar>\r\n                                        <h5>Gender:&nbsp; </h5>\r\n                                    </ListItemAvatar>\r\n                                    <ListItemText primary={details.gender} > </ListItemText>\r\n                                </ListItem>\r\n                                <Divider variant='middle' component=\"li\" />\r\n                                <ListItem>\r\n                                    <ListItemAvatar>\r\n                                        <h5>Age:&nbsp; </h5>\r\n                                    </ListItemAvatar>\r\n                                    {/* <ListItemText primary={details.age.toString()} > </ListItemText> */}\r\n                                </ListItem>\r\n                                <Divider variant='middle' component=\"li\" />\r\n                                <ListItem>\r\n                                    <ListItemAvatar>\r\n                                        <h5>Date of Birth:&nbsp; </h5>\r\n                                    </ListItemAvatar>\r\n                                    {/* <ListItemText primary={details.phoneNo.toString()} > </ListItemText> */}\r\n                                </ListItem>\r\n                            </List>\r\n                            <Divider />\r\n\r\n                            {/*  calling chart js component */}\r\n                            {\r\n                                !loading && details.sensorMachine ? (\r\n                                    <PatientChart />\r\n                                ) : (\r\n                                    <AsignMachine patientId={details.id} />\r\n                                )\r\n                            }\r\n\r\n                        </div>\r\n                    )\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n\r\n    flex-direction: coloumn;\r\n    padding: 10px;\r\n`\r\nexport default PatientDetails\r\n","import axios from 'axios';\r\nimport { PATIENT_DETAILS_FAIL, PATIENT_DETAILS_REQUEST, PATIENT_DETAILS_SUCCESS } from '../actionTypes';\r\n\r\nconst patientDetailsAction = (id) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({\r\n                type: PATIENT_DETAILS_REQUEST \r\n            });\r\n            // const config = {\r\n            //     headers: {\r\n            //         'content-Type': 'aplication/json'\r\n            //     }\r\n            // }\r\n\r\n            const { data } = await axios.get('api/patients/'+ id);\r\n\r\n            dispatch({\r\n                type: PATIENT_DETAILS_SUCCESS,\r\n                payload: data,\r\n            })\r\n            \r\n        } catch (error) {\r\n            dispatch({\r\n                type: PATIENT_DETAILS_FAIL,\r\n                payload: error.response && error.response.data.errors\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport {patientDetailsAction};","import { Divider, List, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\n\r\nfunction Profile({userInfo}) {\r\n    \r\n    return (\r\n        <div>\r\n            <div className='mt-3 ml-3'><h4>Profile Details</h4></div>\r\n            <Divider className='mt-3' />\r\n            <div>\r\n                <List>\r\n                    <ListItem>\r\n                        <ListItemAvatar>\r\n                            <h5>Name:&nbsp; </h5>\r\n                        </ListItemAvatar>\r\n                        <ListItemText primary={userInfo.name}></ListItemText>\r\n                    </ListItem>\r\n                    <Divider variant='middle' />\r\n                    <ListItem>\r\n                        <ListItemAvatar>\r\n                            <h5>Email id:&nbsp; </h5>\r\n                        </ListItemAvatar>\r\n                        <ListItemText primary={userInfo.email}></ListItemText>\r\n                    </ListItem>\r\n                    <Divider variant='middle' />\r\n                    <ListItem>\r\n                        <ListItemAvatar>\r\n                            <h5>Phone number:&nbsp; </h5>\r\n                        </ListItemAvatar>\r\n                        <ListItemText primary={userInfo.phoneNo} > </ListItemText>\r\n                    </ListItem>\r\n                    <Divider variant='middle' />\r\n                    <ListItem>\r\n                        <ListItemAvatar>\r\n                            <h5>Gender:&nbsp; </h5>\r\n                        </ListItemAvatar>\r\n                        <ListItemText primary={userInfo.gender} > </ListItemText>\r\n                    </ListItem>\r\n                </List>\r\n                <Divider />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import axios from 'axios';\r\nimport { INITIATE_MACHINE_FAIL, INITIATE_MACHINE_REQUEST, INITIATE_MACHINE_SUCCESS } from '../actionTypes';\r\n\r\nconst initiateMachineAction = (value, type) => {\r\n    return async (dispatch) => {\r\n\r\n        try {\r\n            dispatch({\r\n                type: INITIATE_MACHINE_REQUEST\r\n            })\r\n            // call to api\r\n            const config = {\r\n                headers: {\r\n                    \"content-Type\": \"application/json\",\r\n                },\r\n            };\r\n            var payload = null;\r\n            if (type === 'r') {\r\n                const { data } = await axios.post('/api/sensorMachine/newmachine',\r\n                    value,\r\n                    config\r\n\r\n                );\r\n                payload = data;\r\n\r\n            } else if ( type === 's' ) {\r\n                const { data } = await axios.put('/api/sensorMachine/allocatemachine',\r\n                    value,\r\n                    config\r\n                );\r\n                payload = data;\r\n            }\r\n\r\n            dispatch({\r\n                type: INITIATE_MACHINE_SUCCESS,\r\n                payload: payload\r\n            });\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: INITIATE_MACHINE_FAIL,\r\n                payload: error.response && error.response.data.errors\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport { initiateMachineAction };\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport styled from 'styled-components';\r\nimport { Divider, FormControl, FormGroup, TextField } from '@material-ui/core';\r\nimport { Form } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport { initiateMachineAction } from '../../redux/actions/sensorMachine/initiateMachineAction';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 24,\r\n        fontWeight: 700\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    mt: {\r\n        marginTop: '15px'\r\n    },\r\n    center: {\r\n        justifyContent: 'center',\r\n        marginTop: '15px',\r\n    }\r\n});\r\n\r\nexport default function AllocateMachine() {\r\n    const classes = useStyles();\r\n    const [value, setValue] = useState({\r\n        machineCode: '',\r\n        authCode: ''\r\n    })\r\n    // console.log(value)    \r\n    const dispatch = useDispatch();\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        dispatch(initiateMachineAction(value, 'r'));\r\n\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        const values = e.target.value;\r\n        setValue({\r\n            ...value,\r\n            [e.target.name]: values,\r\n        });\r\n    }\r\n    return (\r\n        <Container>\r\n            <Content>\r\n                <Form onSubmit={handleSubmit}  noValidate>\r\n                    <Card className={classes.root} variant=\"outlined\">\r\n                        <CardContent>\r\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                Initiate Machine\r\n                     </Typography>\r\n                            <FormControl>\r\n                                <FormGroup>\r\n                                    <TextField\r\n                                        value={value.machineCode}\r\n                                        name='machineCode'\r\n                                        className={classes.mt}\r\n                                        id=\"outlined-basic\"\r\n                                        label=\"Machine code\"\r\n                                        variant=\"outlined\"\r\n                                        onChange={handleChange}\r\n                                        autoComplete='false'\r\n                                    />\r\n                                    <TextField\r\n                                        value={value.authCode}\r\n                                        name='authCode'\r\n                                        className={classes.mt}\r\n                                        id=\"outlined-basic\"\r\n                                        label=\"Authentication code\"\r\n                                        variant=\"outlined\"\r\n                                        onChange={handleChange}\r\n                                        autoComplete='false'\r\n                                    />\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </CardContent>\r\n                        <Divider variant='middle' />\r\n                        <CardActions className={classes.center}>\r\n                            <Button size=\"medium\" type='submit' color='primary' variant='outlined'>Register</Button>\r\n                        </CardActions>\r\n                    </Card>\r\n                </Form>\r\n            </Content>\r\n\r\n        </Container>\r\n\r\n    );\r\n}\r\n\r\nconst Container = styled.div`\r\n    padding-top: 40px;\r\n    height: 100vh;\r\n    background-color: #9390FF;\r\n    justify-content: center;\r\n`\r\nconst Content = styled.div`\r\n    color: white;\r\n    display: grid;\r\n    place-items: center;\r\n`\r\n\r\n","\r\nimport React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport styled from 'styled-components';\r\nimport { Divider, FormControl, FormGroup, TextField } from '@material-ui/core';\r\nimport { Form } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport { initiateMachineAction } from '../../redux/actions/sensorMachine/initiateMachineAction';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 24,\r\n        fontWeight: 700\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    mt: {\r\n        marginTop: '15px'\r\n    },\r\n    center: {\r\n        justifyContent: 'center',\r\n        marginTop: '15px',\r\n    }\r\n});\r\n\r\nexport default function RegisterMachine() {\r\n    const [value, setValue] = useState({\r\n        machineCode: '',\r\n        authCode: '',\r\n        identifyName: ''\r\n    })\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(value)\r\n        dispatch(initiateMachineAction(value, 's'));\r\n\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        const values = e.target.value;\r\n        setValue({\r\n            ...value,\r\n            [e.target.name]: values,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Content>\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Card className={classes.root} variant=\"outlined\">\r\n                        <CardContent>\r\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                Register Machine\r\n                            </Typography>\r\n                            <FormControl>\r\n                                <FormGroup>\r\n                                    <TextField\r\n                                        className={classes.mt}\r\n                                        value={value.machineCode}\r\n                                        name='machineCode'\r\n                                        id=\"outlined-basic\"\r\n                                        label=\"Machine code\"\r\n                                        variant=\"outlined\"\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    <TextField\r\n                                        className={classes.mt}\r\n                                        value={value.authCode}\r\n                                        name='authCode'\r\n                                        id=\"outlined-basic\"\r\n                                        label=\"Authentication code\"\r\n                                        variant=\"outlined\"\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    <TextField\r\n                                        className={classes.mt}\r\n                                        value={value.identifyName}\r\n                                        name='identifyName'\r\n                                        id=\"outlined-basic\"\r\n                                        label=\"Name your Machine\"\r\n                                        variant=\"outlined\"\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </CardContent>\r\n                        <Divider variant='middle' />\r\n                        <CardActions className={classes.center}>\r\n                            {/* Go back on home page button */}\r\n                            <Link to='/'>\r\n                                <Button size=\"medium\" type='submit' color='primary' variant='outlined'>Home</Button>\r\n                            </Link>\r\n                            {/* Register your machine button */}\r\n                            <Button size=\"medium\" type='submit' color='primary' variant='outlined'>Register</Button>\r\n                        </CardActions>\r\n                    </Card>\r\n                </Form>\r\n            </Content>\r\n\r\n        </Container>\r\n\r\n    );\r\n}\r\n\r\nconst Container = styled.div`\r\n    padding-top: 40px;\r\n    height: 100vh;\r\n    background-color: #9390FF;\r\n    justify-content: center;\r\n`\r\nconst Content = styled.div`\r\n    color: white;\r\n    display: grid;\r\n    place-items: center;\r\n`","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport { Divider, List, ListItemText } from '@material-ui/core';\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n  let values = props.value;\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\r\n          values,\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  bar: {\r\n    height: '15px',\r\n    borderRadius: '4px',\r\n  },\r\n}));\r\n\r\nexport default function LinearWithValueLabel(props) {\r\n  var progressData = props.data.confidence * 100;\r\n  const classes = useStyles();\r\n\r\n  const themes = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        main: props.color,\r\n      },\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <List>\r\n        <ListItemText>{props.data.label}</ListItemText>\r\n        <ThemeProvider theme={themes}>\r\n          <LinearProgressWithLabel color='primary' className={classes.bar} value={progressData} />\r\n          <Divider className='mt-2' />\r\n        </ThemeProvider>\r\n      </List>\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\nimport ProgressBar from '../ProgressBar/ProgressBar'\r\n\r\nfunction hashCode() {\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n}\r\n\r\nfunction ProgressBarAdapter(props) {\r\n    const progressBars = props.result.map((item) => {\r\n       let color = hashCode(item.label);\r\n       return(  <ProgressBar color={color} key={item.label} data={item} />)\r\n    })\r\n    return (\r\n        <div>\r\n            {progressBars}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBarAdapter\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport useInterval from '@use-it/interval';\r\nimport Loader from 'react-loader-spinner';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport { Button, Card, CardActions, CardContent, Divider, List, ListItem } from \"@material-ui/core\";\r\nimport styled from 'styled-components';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport queryString from 'query-string'\r\n\r\nimport ml5 from \"ml5\";\r\nimport ProgressBar from \"./ProgressBar/ProgressBar\";\r\nimport ProgressBarAdapter from \"./ProgressBarAdapter/ProgressBarAdapter\";\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    card: {\r\n        display: 'grid',\r\n        placeItems: 'center',\r\n        marginBottom: '15px'\r\n    },\r\n    button: {\r\n        fontWeight: 600,\r\n    }\r\n}));\r\n\r\n// classifier for model is defined\r\nlet classifier;\r\n\r\nfunction DiseaseDetection() {\r\n    const classes = useStyles();\r\n    const videoRef = useRef();\r\n    const [start, setStart] = useState(false);\r\n    const [result, setResult] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [prediction, setPrediction] = useState(null);\r\n\r\n    const parsed = queryString.parse(window.location.search);\r\n    const type = parsed.type;\r\n\r\n    useEffect(() => {\r\n        classifier = ml5.imageClassifier(\"./model/\" + type + \"/model.json\", () => {\r\n            navigator.mediaDevices\r\n                .getUserMedia({ video: true, audio: false })\r\n                .then((stream) => {\r\n                    videoRef.current.srcObject = stream;\r\n                    videoRef.current.play();\r\n                    setLoaded(true);\r\n                });\r\n        });\r\n\r\n    }, []);\r\n\r\n    useInterval(() => {\r\n        if (classifier && start) {\r\n            classifier.classify(videoRef.current, (error, results) => {\r\n                if (error) {\r\n                    console.error(error);\r\n                    return;\r\n                }\r\n                setResult(results);\r\n                if (results.length > 0) {\r\n                    setPrediction(results[0].label)\r\n                }\r\n                // console.log(results)\r\n            });\r\n        }\r\n    }, 500);\r\n\r\n    const toggle = () => {\r\n        setStart(!start);\r\n        setResult([]);\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Loader\r\n                type=\"ThreeDots\"\r\n                color=\"#9390FF\"\r\n                height={40}\r\n                width={40}\r\n                timeout={5000} //3 secs\r\n                visible={!loaded}\r\n                style={{ display: 'flex', justifyContent: 'center', marginTop: '10px' }}\r\n            />\r\n            <Content>\r\n                <Card className={classes.card}>\r\n                    <CardContent>\r\n                        <video\r\n                            preload=\"none\"\r\n                            ref={videoRef}\r\n                            style={{ transform: \"scale(-1, 1)\", border: '2px solid #9390FF' }}\r\n\r\n                        />\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <CardActions>\r\n                        <Link to='/'>\r\n                            <Button\r\n                                size='large'\r\n                                variant='outlined'\r\n                                color='primary'\r\n                                className={classes.button}\r\n                            >\r\n                                Home\r\n                            </Button>\r\n                        </Link>\r\n                        {loaded && (\r\n                            <Button\r\n                                onClick={() => toggle()}\r\n                                size='large'\r\n                                variant='outlined'\r\n                                color='primary'\r\n                                className={classes.button}\r\n                            >\r\n                                {start ? \"Stop\" : \"Start\"}\r\n                            </Button>\r\n                        )}\r\n                    </CardActions>\r\n                </Card>\r\n                <Card className={classes.card}>\r\n                    <CardContent>\r\n                        <div style={{ border: '1px solid #9390FF', width: 220, marginBottom: '10px', borderRadius: '4px', padding: '5px 10px' }}>\r\n                            {\r\n                                start && !prediction ? (\r\n                                    <div>\r\n                                        <Loader\r\n                                            type=\"ThreeDots\"\r\n                                            color=\"#9390FF\"\r\n                                            height={40}\r\n                                            width={40}\r\n                                            style={{ display: 'flex', justifyContent: 'center', marginTop: '10px' }}\r\n                                        />\r\n                                    </div>\r\n                                ) : (\r\n                                    <div>\r\n                                        <ProgressBarAdapter result={result} />\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                        {/* {result.length > 0 && (\r\n                            <div className=\"results\">\r\n                                <ProgressBar data={result[0]} />\r\n                            </div>\r\n                        )} */}\r\n                    </CardContent>\r\n                </Card>\r\n            </Content>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default DiseaseDetection;\r\n\r\nconst Container = styled.div`\r\n    padding-top: 10px;\r\n    height: auto;\r\n    justify-content: center;\r\n`\r\nconst Content = styled.div`\r\n    display: grid;\r\n    place-items: center;\r\n`","import React from 'react'\nimport Home from './Components/Home/Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Login from './Components/Login/Login';\nimport Register from './Components/Register/Register';\nimport AddPatient from './Components/Addpatient/AddPatient';\nimport { useSelector } from 'react-redux';\nimport NavbarContainer from './Components/Navbar/NavbarContainer';\nimport PatientsList from './Components/PatientMonitoring/PatientsList/PatientsList';\nimport PatientDetails from './Components/PatientMonitoring/PatientDetails/PatientDetails';\nimport Profile from './Components/DoctorProfile/Profile';\nimport AllocateMachine from './Components/AllocateMachine/AllocateMachine';\nimport RegisterMachine from './Components/RegisterMachine/RegisterMachine';\nimport DiseaseDetection from './Components/DiseaseDetection/DiseaseDetection';\n\n\nconst App = () => {\n\n  const userInfo = useSelector(state => state.userLogin.userInfo);\n\n  return (\n    <Router>\n      {\n        !userInfo ? (\n          <Switch>\n            <Route path='/newMachine' component={AllocateMachine} />\n            <Route path='/register'>\n              <Register />\n            </Route>\n            <Route path='/'>\n              <Login />\n            </Route>\n          </Switch>\n        ) : (\n          <div className=\"App\">\n            <NavbarContainer userInfo={userInfo} />\n            <Switch>\n              {/* Doctor's Profile */}\n              <Route path='/profile' render={() => <Profile userInfo={userInfo} />} />\n              {/* Patient details content */}\n              <Route path='/patientdetails' component={PatientDetails} />\n              {/* Home page content */}\n              <Route path='/addPatient' component={AddPatient} />\n              <Route path='/diseaseDetection' component={DiseaseDetection} />\n              <Route path='/patientslist' component={PatientsList} />\n              <Route path='/registerMachine' component={RegisterMachine} />\n              {/* Home page */}\n              <Route path=\"/\" render={() => <Home userInfo={userInfo} />} />\n\n            </Switch>\n          </div>\n        )\n      }\n\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import thunk from 'redux-thunk';\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport { userReducer } from '../reducers/users/userReducer';\r\nimport { registerPatientReducer } from '../reducers/patients/patientReducer';\r\nimport {patientListReducer} from '../reducers/patients/patientListReducer'\r\nimport { patientDetailsReducer } from '../reducers/patients/patientDetailsReducer';\r\nimport { firebasePatientReducer } from '../reducers/patients/firebasePatientReducer';\r\nimport { sensorMachineReducer } from '../reducers/sensorMachine/sensorMachineReducer';\r\n\r\nconst Middlewares = [thunk]\r\n\r\nconst userDatafromStorage = localStorage.getItem('userAuthData') ? JSON.parse(localStorage.getItem('userAuthData')): null;\r\n\r\nconst initialState = {\r\n    userLogin: {\r\n        userInfo: userDatafromStorage\r\n    }\r\n};\r\n\r\nconst reducer = combineReducers({\r\n    userLogin: userReducer,\r\n    createPatient: registerPatientReducer,\r\n    patientList: patientListReducer,\r\n    patientDetail: patientDetailsReducer,\r\n    firebase: firebasePatientReducer,\r\n    sensorMachine : sensorMachineReducer\r\n})\r\n\r\n\r\n\r\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...Middlewares)));\r\n\r\n\r\n\r\nexport default store","import {\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS\r\n} from \"../../actions/actionTypes\";\r\n\r\nconst userReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case USER_LOGIN_REQUEST:\r\n            return {\r\n                loading: true,\r\n            }\r\n        case USER_LOGIN_SUCCESS:\r\n            return {\r\n                userInfo: action.payload,\r\n            }\r\n        case USER_LOGIN_FAIL:\r\n            return {\r\n                error: action.payload,\r\n                loading: false,\r\n            }\r\n        case USER_REGISTER_REQUEST:\r\n            return {\r\n                loading: true,\r\n            }\r\n        case USER_REGISTER_SUCCESS:\r\n            return {\r\n                userInfo: action.payload\r\n            }\r\n        case USER_REGISTER_FAIL:\r\n            return {\r\n                error: action.payload,\r\n                loading: false,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n// const registerReducer = (state = {}, action) => {\r\n//     switch (action.type) {\r\n//         case USER_REGISTER_REQUEST:\r\n//             return {\r\n//                 loading: true,\r\n//             }\r\n//         case USER_REGISTER_SUCCESS:\r\n//             return {\r\n//                 userInfo: action.payload\r\n//             }\r\n//         case USER_REGISTER_FAIL:\r\n//             return {\r\n//                 error: action.payload,\r\n//                 loading: false,\r\n//             }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\nexport { userReducer }","import { PATIENT_REGISTER_FAIL, PATIENT_REGISTER_REQUEST, PATIENT_REGISTER_SUCCESS } from \"../../actions/actionTypes\";\r\n\r\nconst registerPatientReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case PATIENT_REGISTER_REQUEST:\r\n            return {\r\n                loading: true,\r\n            }\r\n        case PATIENT_REGISTER_SUCCESS:\r\n            return {\r\n                patientInfo: action.payload\r\n            }\r\n        case PATIENT_REGISTER_FAIL:\r\n            return {\r\n                error: action.payload,\r\n                loading: false,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport {registerPatientReducer};","import { FETCH_PATIENT_FAIL, FETCH_PATIENT_REQUEST, FETCH_PATIENT_SUCCESS } from \"../../actions/actionTypes\";\r\n\r\n\r\nconst patientListReducer = (state={loading: true}, action) => {\r\n    switch (action.type){\r\n        case FETCH_PATIENT_REQUEST:\r\n            return {\r\n                loading: true,\r\n                error: null\r\n            }\r\n        case FETCH_PATIENT_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                patientInfo: action.payload\r\n            }\r\n        case FETCH_PATIENT_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport {patientListReducer};","import { PATIENT_DETAILS_FAIL, PATIENT_DETAILS_REQUEST, PATIENT_DETAILS_SUCCESS } from \"../../actions/actionTypes\";\r\n\r\nconst patientDetailsReducer = (state={loading: true}, action) => {\r\n    switch (action.type){\r\n        case PATIENT_DETAILS_REQUEST:\r\n            return {\r\n                loading: true,\r\n                error: null\r\n            }\r\n        case PATIENT_DETAILS_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                details: action.payload\r\n            }\r\n        case PATIENT_DETAILS_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport {patientDetailsReducer};","import { FIREBASE_UPDATE_FAIL, FIREBASE_UPDATE_REQUEST, FIREBASE_UPDATE_SUCCESS } from \"../../actions/actionTypes\";\r\n\r\nconst firebasePatientReducer = (state={}, action) => {\r\n    switch (action.type){\r\n        case FIREBASE_UPDATE_REQUEST:\r\n            return {\r\n                loading: true,\r\n                error: null\r\n            }\r\n        case FIREBASE_UPDATE_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                details: action.payload\r\n            }\r\n        case FIREBASE_UPDATE_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport { firebasePatientReducer };","import {\r\n    ASSIGN_MACHINE_FAIL,\r\n    ASSIGN_MACHINE_REQUEST,\r\n    ASSIGN_MACHINE_SUCCESS,\r\n    INITIATE_MACHINE_FAIL,\r\n    INITIATE_MACHINE_REQUEST,\r\n    INITIATE_MACHINE_SUCCESS,\r\n    LOAD_MACHINE_LIST_FAIL,\r\n    LOAD_MACHINE_LIST_REQUEST,\r\n    LOAD_MACHINE_LIST_SUCCESS\r\n} from \"../../actions/actionTypes\"\r\n\r\nconst sensorMachineReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case INITIATE_MACHINE_REQUEST:\r\n            return {\r\n                loading: true,\r\n            }\r\n        case INITIATE_MACHINE_SUCCESS:\r\n            return {\r\n                sensorMachine: action.payload,\r\n            }\r\n        case INITIATE_MACHINE_FAIL:\r\n            return {\r\n                error: action.payload,\r\n                loading: false,\r\n            }\r\n\r\n\r\n        case LOAD_MACHINE_LIST_REQUEST:\r\n            return {\r\n                MachineListLoading: true,\r\n            }\r\n        case LOAD_MACHINE_LIST_SUCCESS:\r\n            return {\r\n                sensorMachine: action.payload,\r\n            }\r\n        case LOAD_MACHINE_LIST_FAIL:\r\n            return {\r\n                error: action.payload,\r\n                MachineListLoading: false,\r\n            }\r\n\r\n\r\n\r\n        case ASSIGN_MACHINE_REQUEST:\r\n            return {\r\n                AssignMachineLoading: true,\r\n            }\r\n        case ASSIGN_MACHINE_SUCCESS:\r\n            return {\r\n                sensorMachine: action.payload,\r\n            }\r\n        case  ASSIGN_MACHINE_FAIL:\r\n            return {\r\n                error: action.payload,\r\n                AssignMachineLoading: false,\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport { sensorMachineReducer };","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport store from './redux/store/store';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.register();\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}